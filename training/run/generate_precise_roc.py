from .args import ArgumentParserBuilder, opt
import matplotlib.pyplot as plt

from openpyxl import load_workbook

"""
This script takes in both reports for precise dataset and reports for howl generated by run_exp.py to create roc curve

sample command:
python -m training.run.generate_precise_roc --exp_timestamp Sep-08-11-28 --exp_type hey_firefox
"""

def get_metrics(exp_type, wb, thresholds):
    dev_far = []
    dev_frr = []

    test_far = []
    test_frr = []

    # total audio length in sec, these number can be found when the datasets are loaded from training
    total_dev_len = 0.0
    total_test_len = 0.0

    if exp_type == "hey_ff":
        total_dev_len = 10679.505062500015
        total_test_len = 10364.291000000001

    elif exp_type == "hey_snips":
        total_dev_len = 46066.6921250002
        total_test_len = 47047.301562499844

    for threshold in thresholds:
        sheet = wb[str(threshold)]

        dev_tp = float(sheet['C3'].value)
        dev_fn = float(sheet['F3'].value)
        dev_tn = float(sheet['J3'].value)
        dev_fp = float(sheet['K3'].value)

        dev_far.append(dev_fp / (total_dev_len / 3600))
        dev_frr.append(dev_fn / (dev_fn + dev_tp))

        test_tp = float(sheet['O3'].value)
        test_fn = float(sheet['R3'].value)
        test_tn = float(sheet['V3'].value)
        test_fp = float(sheet['W3'].value)

        test_far.append(test_fp / (total_test_len / 3600))
        test_frr.append(test_fn / (test_fn + test_tp))

    return dev_far, dev_frr, test_far, test_frr


def main():
    apb = ArgumentParserBuilder()
    apb.add_options(opt('--howl_exp_timestemp',
                        type=str,
                        default="Sep-08-11-28"),
                    opt('--precise_exp_timestemp',
                        type=str,
                        default="Sep-08-11-28"),
                    opt('--howl_exp_dir',
                        type=str,
                        default="exp_results/"),
                    opt('--precise_exp_dir',
                        type=str,
                        default="../mycroft-precise/exp_results/"),
                    opt('--exp_type',
                        type=str,
                        default="hey_ff"))

    args = apb.parser.parse_args()

    print("exp type: ", args.exp_type)

    clean_file_name = args.howl_exp_dir+args.exp_type+"_clean_"+args.howl_exp_timestemp+".xlsx"
    print('\treport for clean: ', clean_file_name)
    clean_wb = load_workbook(clean_file_name)

    noisy_file_name = args.howl_exp_dir+args.exp_type+"_noisy_"+args.howl_exp_timestemp+".xlsx"
    print('\treport for noisy: ', noisy_file_name)
    noisy_wb = load_workbook(noisy_file_name)

    precise_clean_file_name = args.precise_exp_dir+args.exp_type+"_clean_"+args.precise_exp_timestemp+".xlsx"
    print('\treport for precise_clean: ', precise_clean_file_name)
    precise_clean_wb = load_workbook(precise_clean_file_name)

    precise_noisy_file_name = args.precise_exp_dir+args.exp_type+"_noisy_"+args.precise_exp_timestemp+".xlsx"
    print('\treport for precise_noisy: ', precise_noisy_file_name)
    precise_noisy_wb = load_workbook(precise_noisy_file_name)

    thresholds = []

    for name in clean_wb.sheetnames:
        try:
            thresholds.append(float(name))
        except ValueError:
            print("Not a float: ", name)

    clean_dev_far, clean_dev_frr, clean_test_far, clean_test_frr = get_metrics(args.exp_type, clean_wb, thresholds)
    noisy_dev_far, noisy_dev_frr, noisy_test_far, noisy_test_frr  = get_metrics(args.exp_type, noisy_wb, thresholds)

    precise_clean_dev_far, precise_clean_dev_frr, precise_clean_test_far, precise_clean_test_frr = get_metrics(args.exp_type, precise_clean_wb, thresholds)
    precise_noisy_dev_far, precise_noisy_dev_frr, precise_noisy_test_far, precise_noisy_test_frr  = get_metrics(args.exp_type, precise_noisy_wb, thresholds)

    # roc for test 

    plt.figure(0)
    plt.rcParams.update({'font.size': 12})

    plt.xlabel('False Alarms Per Hour')
    plt.ylabel('False Rejection Rate')

    plt.plot(clean_test_far[1:-1], clean_test_frr[1:-1], '-+', color='tab:blue', label = 'howl clean')
    plt.plot(noisy_test_far[1:-1], noisy_test_frr[1:-1], '-+', color='tab:orange', label = 'howl noisy')

    plt.plot(precise_noisy_test_far[1:-1], precise_noisy_test_frr[1:-1], '-+', color='tab:purple', label = 'precise noisy')
    plt.plot(precise_clean_test_far[1:-1], precise_clean_test_frr[1:-1], '-+', color='tab:green', label = 'precise clean')

    plt.grid()
    plt.legend()
    plt.savefig("exp_results/" + args.exp_type+ "_test_" +args.howl_exp_timestemp + '.pdf')
    plt.clf()

    # roc for dev

    plt.figure(1)
    plt.rcParams.update({'font.size': 12})

    plt.xlabel('False Alarms Per Hour')
    plt.ylabel('False Rejection Rate')

    plt.plot(clean_dev_far[1:-1], clean_dev_frr[1:-1], '-+', color='tab:blue', label = 'howl clean')
    plt.plot(noisy_dev_far[1:-1], noisy_dev_frr[1:-1], '-+', color='tab:orange', label = 'howl noisy')

    plt.plot(precise_clean_dev_far[1:-1], precise_clean_dev_frr[1:-1], '-+', color='tab:green', label = 'precise clean')
    plt.plot(precise_noisy_dev_far[1:-1], precise_noisy_dev_frr[1:-1], '-+', color='tab:purple', label = 'precise noisy')

    plt.grid()
    plt.legend()
    plt.savefig("exp_results/" + args.exp_type+ "_dev_" +args.howl_exp_timestemp + '.pdf')


if __name__ == '__main__':
    main()
